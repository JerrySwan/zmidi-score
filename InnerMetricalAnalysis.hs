{-# OPTIONS_GHC -Wall #-}
--------------------------------------------------------------------------------
-- |
-- Module      :  InnerMetricalAnalysis
-- Copyright   :  (c) 2012--2013 Utrecht University
-- License     :  LGPL-3
--
-- Maintainer  :  W. Bas de Haas <bash@cs.uu.nl>
-- Stability   :  experimental
-- Portability :  non-portable
--
-- Summary: implements the Inner Metrical Analysis model 
-- see: 
--------------------------------------------------------------------------------
module Main -- ( -- * Types for Local Meters
                               -- LMeter (..)
                             -- , Time
                             -- , Weight
                             -- , Period
                             -- , Len
                               -- -- * The Inner Metrical Analysis
                             -- , getLocalMeters
                             -- , getMetricWeight
                             -- , getSpectralWeight
                             -- , normalise
                               -- -- * parameters
                             -- -- , maximumPhase
                             -- -- , phaseStepSize
                             -- , main
                             -- , toList
                             -- )
                             where

import Data.List                  ( foldl', nubBy )
import Data.IntMap                ( empty, IntMap, insert, toAscList, elems
                                  , foldrWithKey, insertWith, split
                                  , filterWithKey )
import qualified Data.IntMap as M ( lookup, fromList, null, map )
import Data.Vector                ( Vector, (!) )
import qualified Data.Vector as V ( fromList, length )
import LocalMeter
import InnerMetricalAnalysisOld   ( getLocalMetersOld, getSpectralWeightOld, getMetricWeightOld )
import Control.Arrow              ( first )
-- import Debug.Trace

type Weight = Int
-- type MeterMap = IntMap [(Time, Len)]
type MeterMap = IntMap (IntMap Len)

--------------------------------------------------------------------------------
-- Local Meters
--------------------------------------------------------------------------------

-- | Inner Metric Analysis defines the pulses of a piece of music solely on 
-- the base of note onsets. The model considers all the pulses, called 
-- local metres, that can overlay with each other with very different periods 
-- and shifted at all phases.
getLocalMeters :: Period -> [Time] -> MeterMap
getLocalMeters _   []  = empty
getLocalMeters phs ons = foldl' onePeriod empty 
              -- todo change this into a parameter
              ([phs, (2 * phs) .. (Period (time . last $ ons) `div` 2)]) where
              
   v = V.fromList $ onsetGrid [0 .. last ons] ons
   
   onePeriod :: MeterMap -> Period -> MeterMap
   onePeriod m p = insertMeters facts m p . foldl oneMeter empty $ ons where
   
     facts = factors p
     
     -- oneMeter :: [(Time, Len)] -> Time -> [(Time, Len)]     
     oneMeter :: OnsetMap -> Time -> OnsetMap
     oneMeter l t = addLMeter l p t $ getLength v p t
     
-- | Creates a grid of 'Bool's where 'True' represents an onset and 'False'
-- no onset
--
-- >>> onsetGrid [0..10] [2,3,6,7]
-- >>> [False,False,True,True,False,False,True,True,False,False,False]
onsetGrid :: [Time] -> [Time] -> [Bool]
onsetGrid []     []     = []
onsetGrid []     os     = error ("onsetGrid: grid to small for onsets" ++ show os)
onsetGrid gs     []     = replicate (length gs) False
onsetGrid (g:gs) (o:os) | g == o = True  : onsetGrid gs    os
                        | g <  o = False : onsetGrid gs (o:os)
                        | o >  g = error "onsetGrid: non-monotone onsets"
onsetGrid _      _     = error "onsetGrid: non-monotone onsets"


        
getLength :: Vector Bool -> Period -> Time -> Len
getLength v (Period p) o = pred $ project o where

  project :: Time -> Len
  project (Time t) | t < V.length v && v ! t = 1 + project (Time (t + p))
                   | otherwise               = 0

                   
addLMeter :: OnsetMap -> Period -> Time -> Len -> OnsetMap
addLMeter m p t l 
  | (len l) >= 2 && isMax2 p m p (time t) l = insert (time t) l m
  | otherwise                               =                   m

insertMeters :: [Period] -> MeterMap -> Period -> OnsetMap -> MeterMap
-- insertMeters :: [Period] -> MeterMap -> Period -> [(Time, Len)] -> MeterMap
insertMeters fs mm p om 
  | M.null om' = mm
  | otherwise  = insert (period p) om' mm
      where om' = filterWithKey (isMaximal fs mm p) om

isMaximal :: [Period] -> MeterMap -> Period -> Int -> Len -> Bool
isMaximal fs m p t l = and . map isMaxInMeterMap $ fs where

  isMaxInMeterMap :: Period -> Bool
  isMaxInMeterMap f = case M.lookup (period f) m of
                         Nothing -> True
                         Just om -> isMax2 f om p t l

                            
-- being maximal means not being a subset
isMax :: Period -> [(Time, Len)] -> Period -> (Time, Len) -> Bool
isMax f m  p x = and $ map (not . isSubSet p x f) m
-- isMax f m p x =  traceShow (p,x,a) a where a = and $ map (not . isSubSet p x f) m

type OnsetMap = IntMap Len


isMax3 :: Period -> [(Time, Len)] -> Period -> (Time, Len) -> Bool
isMax3 f m p (Time t, l) = isMax2 f (M.fromList $ map (first time) m) p t l

subMap2 :: [(Time, Len)] -> (Time, Len) -> OnsetMap
subMap2 m (Time t, _l) = subMap (M.fromList $ map (first time) m) t

isMax2 :: Period -> OnsetMap -> Period -> Int -> Len -> Bool
isMax2 (Period f) m (Period pb) tb (Len lb) = 
  foldrWithKey noSubSet True (subMap m tb) -- select all meters that start earlier

    where noSubSet :: Int -> Len -> Bool -> Bool
          noSubSet ta (Len la) r = 
             (  ta `mod` f  /= tb `mod` f    -- not in phase
             || ta + (la * f) < tb + (lb * pb) )-- ends later
             && r

subMap :: OnsetMap -> Int -> OnsetMap
subMap m t = fst $ split (succ t) m
  -- snd $ split (t + (p*l)) (fst $ split t m)

pIsMax :: Period -> [(Time, Len)] -> Period -> (Time, Len) -> Bool
pIsMax f m p tl = let m' = nubBy (\(a,_) (b,_) -> a == b) m
                  in  f < p || isMax f m' p tl == isMax3 f m' p tl

-- returns true if the first pair is a meter that is a subset of the
-- second meter pair
-- N.B. precondition: pb > pa
isSubSet :: Period -> (Time, Len) -> Period -> (Time, Len) -> Bool
isSubSet (Period pa) (Time ta, Len la) (Period pb) (Time tb, Len lb) = 
-- isSubSet :: LMeter -> LMeter -> Bool
-- isSubSet (LMeter ta pa la) (LMeter tb pb lb) =
     ta             >= tb             -- starts later
  && ta `mod` pb    == tb `mod` pb    -- has the same phase
  && ta + (la * pa) <= tb + (lb * pb) -- ends earlier


showMeterMap :: MeterMap -> String
showMeterMap = concatMap showPer . toAscList

showPer :: (Int, OnsetMap) -> String
showPer (p, l) =  "Period: " ++ show p 
               ++ concatMap (showMeter p) (toAscList l) ++ "\n"

showMeter :: Int -> (Int, Len) -> String
showMeter p (t, Len l) = " (onset="++ show t++ " per=" ++ show p ++ " len="++ show l ++ ")"

--------------------------------------------------------------------------------
-- Inner Metrical Analysis Weights
--------------------------------------------------------------------------------

-- | Based on the detection of all local metres in a given piece a metric weight 
-- for each onset is defined that reflects the amount of local metres that 
-- coincide at this onset. Hence, the basic idea is similar. Onsets where many 
-- pulses coincide get a greater weight than onsets where fewer pulses coincide. 
-- Moreover, the intuition modelled in the metric weight is that longer 
-- repetitions should contribute more weight than shorter ones.
getMetricWeight :: Period -> [Time] -> [Weight]
getMetricWeight p = elems . getMetricMap p where
 
type WeightMap = IntMap Weight

getMetricMap :: Period -> [Time] -> WeightMap
getMetricMap mP ons = foldrWithKey onePeriod initMap $ getLocalMeters mP ons where
   
   initMap :: WeightMap 
   initMap = foldr (\o m -> insertWith (+) o 0 m) empty (map time ons)
   
   onePeriod :: Int -> OnsetMap -> WeightMap -> WeightMap
   onePeriod p om w = foldrWithKey oneMeter w om where
     
     oneMeter :: Int -> Len -> WeightMap -> WeightMap
     oneMeter t (Len l) m' = foldr addWeight m' [t, t+p .. t + (l*p)] where
     
       addWeight :: Int -> WeightMap -> WeightMap
       addWeight o m'' = insertWith (+) o ( l ^ (2 :: Int) ) m''

-- | The spectral weight is based on the extension of each local metre throughout 
-- the entire piece.
getSpectralWeight :: Period -> [Time] -> [Weight]
getSpectralWeight _ []  = []
getSpectralWeight p os = elems $ getSpectralMap p os [(head os) .. (last os)]
 
getSpectralMap :: Period -> [Time] -> [Time] -> WeightMap
getSpectralMap mP ons grid = foldrWithKey onePeriod initMap $ getLocalMeters mP ons where
   
   intGrid :: [Int]
   intGrid = map time grid
   
   initMap :: WeightMap 
   initMap = foldr (\o m -> insertWith (+) o 0 m) empty intGrid
   
   onePeriod :: Int -> OnsetMap -> WeightMap -> WeightMap
   onePeriod p om w = foldrWithKey oneMeter w om where
     
     oneMeter :: Int -> Len -> WeightMap -> WeightMap
     oneMeter t (Len l) m' = foldr addWeight m' intGrid where
     
       addWeight :: Int -> WeightMap -> WeightMap
       addWeight o m'' 
         | o `mod` p == t `mod` p = insertWith (+) o ( l ^ (2 :: Int) ) m''
         | otherwise              = m''
 
-- testing
main :: IO ()
-- main = print $ getMetricWeight 1 [6,13,16,17,20,26,28,36,44,49,50,56,57,61,64,66,68,73,75,76,83,85,88,91,93,95,99,105,107,110,116,119,124,129,136,137,145,147,151,158,161,166,174,178,184,188,192,200,201,208,213,219,225,230,231,235,238,240,241,242,246,253,259,261,266,267,275,277,281,284,286,290,298,304,311,317,322,325,330,337,340,341,346,352,355,362,370,378,383,389,393,394,399,405,410,416,423,427,435,439,445,450,456,462,469,471,478,481,487,495,501,508,510,515,519,526,532,535,543,550,557,563,566,571,574,576,580,583,589,595,596,599,604,611,619,620,625,627,631,634,640,647,651,659,664,666,669,674,676,679,681,683,690,692,694,695,697,701,702,707,711,716,719,725,732,737,739,740,747,751,755,757,763,767,770,778,784,792,798,806,811,814,818,824,829,830,831,832,839,840,844,852,856,861,862,864,866,871,873,876,877,882,884,892,898,906,908,913,920,924,925,929,931,937,941,946,949,954,962,970,974,978,983,986,989,995,1002,1008,1012,1017,1019,1027,1029,1035,1042,1050,1055,1060,1061,1067,1073,1079,1081,1083,1091,1098,1105,1108,1112,1118,1121,1128,1132,1135,1143,1147,1150,1157,1160,1168,1174,1177,1185,1191,1198,1199,1204,1207,1214,1221,1222,1223,1231,1239,1243,1244,1251,1253,1259,1260,1262,1265,1270,1278,1281,1282,1285,1286,1293,1299,1303,1306,1311,1313,1317,1323,1326,1328,1332,1338,1345,1351,1352,1359,1361,1367,1372,1373,1378,1384,1392,1400,1408,1416,1422,1428,1436,1443,1450,1457,1458,1462,1468,1476,1477,1482,1487,1490,1491,1497,1502,1504,1510,1511,1513,1521,1526,1533,1534,1540,1543,1548,1555,1558,1561,1565,1573,1581,1587,1591,1598,1605,1607,1611,1616,1620,1628,1636,1641,1648,1652,1658,1665,1667,1668,1673,1678,1680,1687,1693,1698,1706,1708,1713,1721,1726,1731,1732,1737,1742,1748,1755,1761,1769,1770,1771,1778,1781,1784,1788,1789,1790,1793,1795,1802,1809,1813,1819,1826,1831,1839,1846,1849,1857,1858,1861,1868,1876,1878,1885,1888,1891,1893,1900,1905,1912,1914,1919,1920,1923,1930,1938,1940,1944,1951,1955,1959,1963,1965,1968,1976,1978,1982,1984,1991,1997,1998,1999,2005,2013,2014,2018,2023,2030,2038,2044,2048,2052,2054,2056,2064,2070,2076,2078,2084,2090,2095,2099,2100,2107,2113,2115,2116,2124,2132,2137,2140,2145,2150,2157,2165,2167,2175,2183,2189,2197,2201,2203,2209,2217,2222,2228,2231,2234,2238,2241,2244,2249,2255,2263,2271,2274,2277,2284,2285,2286,2290,2297,2300,2302,2304,2305,2313,2318,2325,2333,2341,2349,2356,2364,2367,2370,2377,2378,2379,2380,2386,2392,2394,2398,2405,2411,2418,2419,2423,2431,2436,2438,2444,2446,2454,2460,2466,2469,2473,2481,2487,2491,2496,2498,2503,2511,2512,2514,2518,2525,2532,2534,2537,2542,2543,2550,2555,2558,2563,2570,2572,2576,2583,2584,2592,2599,2606,2614,2619,2626,2631,2633,2636,2642,2643,2650,2652,2659,2666,2668,2672,2674,2676,2680,2685,2686,2691,2697,2703,2707,2709,2713,2721,2727,2728,2732,2733,2740,2744,2748,2751,2759,2764,2772,2778,2783,2791,2796,2800,2803,2809,2814,2821,2825,2832,2840,2841,2849,2851,2855,2856,2863,2864,2871,2877,2884,2892,2897,2903,2908,2916,2919,2925,2933,2940,2942,2947,2951,2956,2958,2964,2966,2970,2971,2974,2975,2980,2981,2986,2992,2997,3005,3008,3011,3018,3023,3024,3025,3032,3035,3040,3041,3043,3047,3054,3055,3061,3064,3072,3077,3079,3082,3090,3092,3094,3096,3099,3107,3115,3120,3127,3128,3130,3132,3139,3147,3148,3155,3158,3165,3171,3179,3186,3194,3196,3204,3210,3214,3220,3221,3224,3230,3233,3234,3236,3239,3247,3254,3259,3261,3264,3266,3270,3272,3277,3284,3289,3297,3299,3300,3305,3310,3312,3317,3320,3328,3334,3335,3343,3344,3345,3349,3355,3361,3367,3374,3380,3384,3388,3393,3394,3395,3398,3402,3407,3415,3422,3427,3432,3438,3442,3450,3453,3461,3462,3470,3473,3480,3487,3488,3491,3493,3501,3502,3505,3509,3517,3524,3531,3538,3539,3545,3549,3555,3559,3564,3569,3574,3581,3584,3585,3589,3592,3595,3600,3607,3608,3614,3622,3627,3634,3636,3639,3643,3651,3652,3657,3665,3672,3679,3686,3693,3700,3707,3714,3721,3723,3725,3727,3729,3730,3734,3738,3740,3745,3752,3755,3761,3767,3772,3779,3785,3793,3796,3802,3810,3818,3823,3830,3834,3836,3844,3848,3851,3853,3857,3859,3863,3867,3872,3874,3880,3885,3893,3898,3902,3909,3911,3912,3916,3917,3920,3922,3929,3934,3941,3944,3949,3955,3960,3965,3969,3975,3981,3985,3990,3993,3998,3999,4006,4011,4015,4019,4020,4021,4024,4025,4033,4036,4037,4042,4048,4050,4054,4056,4063,4068,4069,4075,4076,4084,4089,4096,4104,4107,4109,4116,4123,4125,4127,4133,4137,4144,4151,4152,4153,4154,4160,4166,4171,4173,4174,4177,4182,4189,4192,4198,4201,4205,4210,4213,4218,4221,4225,4226,4228,4235,4239,4241,4242,4245,4248,4252,4253,4256,4264,4270,4277,4285,4288,4296,4304,4311,4312,4314,4319,4324,4328,4329,4334,4337,4342,4350,4353,4355,4363,4367,4371,4377,4384,4390,4392,4396,4399,4400,4401,4405,4409,4416,4421,4429,4432,4434,4438,4439,4441,4448,4451,4453,4456,4461,4467,4471,4473,4477,4479,4485,4493,4501,4502,4506,4512,4514,4515,4517,4521,4522,4529,4530,4532,4539,4542,4548,4556]
main = print $ getMetricWeight 1 [3,4,8,15,19,22,25,31,38,41,47,50,53,56,64,70,71,75,79,86,94,100,107,112,120,125,131,134,135,140,142,144,146,152,160,167,172,177,179,185,187,191,193,196,202,208,211,216,220,224,228,229,231,233,237,239,246,248,250,256,263,271,273,279,282,287,291,297,302,310,316,319,321,323,329,334,338,340,344,349,357,358,361,366,374,379,386,389,393,397,402,410,413,421,429,436,437,442,445,452,453,460,463,466,467,470,471,478,486,490,492,496,504,510,514,520,525,530,537,544,551,554,561,568,573,575,577,579,585,591,595,596,598,602,607,612,613,614,618,623,631,638,646,652,659,661,667,669,673,678,686,688,693,700,703,704,705,712,716,720,725,728,733,740,747,749,751,756,758,764,769,775,778,781,782,788,793,800,806,814,822,830,832,837,843,845,849,854,862,865,871,876,880,888,892,895,898,902,903,906,907,909,914,922,927,928,936,941,944,946,952,957,961,962,970,978,983,988,989,991,995,998,1006,1009,1017,1021,1028,1035,1042,1049,1054,1058,1066,1069,1070,1077,1085,1086,1094,1095,1100,1101,1102,1104,1110,1118,1120,1124,1130,1138,1139,1140,1144,1151,1156,1163,1169,1177,1179,1186,1193,1199,1201,1208,1211,1214,1219,1226,1233,1238,1242,1249,1250,1253,1261,1269,1276,1280,1284,1290,1295,1299,1301,1305,1306,1307,1314,1319,1323,1326,1327,1334,1337,1345,1349,1355,1363,1366,1373,1377,1384,1392,1394,1398,1402,1404,1409,1416,1419,1426,1433,1437,1441,1443,1451,1452,1456,1462,1466,1472,1476,1482,1483,1485,1486,1493,1499,1507,1509,1517,1521,1529,1534,1536,1544,1545,1548,1555,1560,1561,1569,1577,1583,1589,1590,1595,1598,1606,1613,1618,1624,1626,1630,1636,1644,1647,1655,1660,1668,1673,1679,1680,1683,1686,1690,1693,1700,1707,1709,1712,1717,1720,1726,1731,1736,1743,1750,1755,1758,1760,1761,1767,1768,1772,1773,1780,1787,1795,1799,1802,1810,1818,1819,1823,1827,1831,1836,1839,1840,1843,1845,1849,1853,1855,1863,1869,1871,1878,1881,1889,1891,1893,1901,1907,1911,1915,1922,1923,1929,1935,1942,1948,1952,1959,1960,1965,1972,1973,1975,1979,1983,1991,1993,1996,2004,2008,2014,2019,2020,2026,2029,2031,2032,2036,2042,2044,2052,2060,2068,2076,2083,2088,2094,2095,2102,2109,2111,2118,2121,2129,2137,2140,2141,2147,2152,2159,2162,2166,2170,2178,2180,2188,2193,2197,2203,2206,2213,2218,2224,2229,2237,2240,2245,2248,2251,2252,2254,2260,2266,2267,2269,2271,2275,2278,2279,2281,2287,2292,2295,2302,2306,2313,2319,2327,2328,2332,2340,2348,2356,2359,2367,2374,2379,2387,2388,2394,2399,2407,2413,2415,2417,2418,2419,2424,2425,2430,2434,2438,2439,2444,2450,2456,2463,2469,2473,2481,2484,2488,2496,2503,2505,2507,2512,2514,2521,2529,2537,2541,2542,2549,2551,2558,2561,2569,2577,2585,2591,2593,2596,2600,2606,2609,2613,2621,2622,2625,2633,2635,2642,2647,2651,2654,2662,2663,2671,2678,2679,2683,2686,2689,2696,2703,2706,2711,2714,2717,2721,2722,2723,2726,2732,2740,2743,2746,2750,2752,2757,2761,2763,2767,2774,2775,2778,2782,2784,2788,2795,2802,2804,2808,2815,2821,2822,2830,2832,2838,2843,2844,2846,2849,2853,2854,2859,2864,2870,2878,2881,2885,2892,2893,2899,2900,2907,2908,2916,2917,2925,2926,2933,2934,2935,2938,2940,2945,2949,2955,2961,2967,2973,2980,2984,2992,2998,2999,3006,3014,3017,3021,3023,3026,3027,3029,3032,3036,3037,3042,3050,3051,3058,3065,3067,3074,3078,3081,3085,3093,3095,3100,3107,3109,3111,3117,3120,3121,3126,3128,3132,3134,3141,3143,3146,3150,3158,3163,3164,3168,3172,3179,3183,3185,3193,3198,3206,3213,3220,3223,3226,3234,3237,3239,3247,3251,3256,3259,3266,3274,3275,3279,3285,3286,3292,3298,3302,3303,3310,3318,3320,3325,3330,3338,3340,3347,3354,3355,3357,3361,3365,3366,3371,3376,3383,3389,3397,3403,3405,3407,3415,3422,3430,3438,3445,3449,3453,3454,3457,3464,3465,3467,3468,3471,3478,3480,3485,3487,3488,3490,3494,3495,3500,3504,3507,3513,3519,3521,3522,3530,3534,3542,3545,3550,3554,3556,3561,3566,3570,3573,3575,3577,3582,3590,3594,3601,3607,3614,3619,3626,3631,3638,3646,3650,3651,3659,3665,3671,3677,3681,3682,3688,3689,3693,3699,3703,3707,3710,3716,3721,3724,3730,3731,3733,3739,3740,3742,3744,3746,3750,3757,3759,3765,3768,3769,3772,3779,3782,3786,3792,3795,3800,3803,3808,3810,3814,3815,3817,3824,3826,3832,3839,3840,3842,3846,3853,3860,3864,3870,3873,3878,3879,3887,3890,3895,3900,3904,3906,3908,3913,3916,3921,3924,3926,3929,3937,3938,3943,3944,3946,3947,3953,3956,3963,3967,3972,3976,3982,3988,3994,4001,4008,4009,4014,4020,4027,4033,4035,4040,4044,4051,4059,4066,4068,4075,4080,4082,4090,4094,4099,4103,4104,4109,4114,4118,4119,4124,4126,4129,4135,4141,4147,4148,4150,4152,4155,4162,4165,4173,4179,4183,4184,4187,4193,4194,4196,4197,4200,4206,4208,4216,4219,4226,4233,4234,4239,4243,4251,4259,4265,4268,4273,4278,4285,4291,4297,4301,4305,4309,4312,4318,4326,4327,4328,4331,4334,4337,4342,4346,4353,4356,4360,4366,4370,4371,4376,4379,4381,4383,4388,4392,4396,4398,4406,4411,4414,4417,4425,4427,4429,4435,4442,4449,4451,4454,4458,4466,4469,4477,4478,4479,4483,4487,4495,4503,4508,4513,4517,4519,4522,4524,4525,4533,4537,4538,4540,4541,4542,4548,4556,4563,4569,4571,4575,4582,4590,4596,4603,4605,4607,4613,4620,4626,4627,4629,4630,4631,4633,4640,4641,4644,4652,4654,4659,4661,4665,4669,4677,4681,4682,4689,4696,4703,4705,4712,4720,4727,4735,4743,4750,4752,4756,4760,4761,4769,4776,4780,4782,4788,4791,4795,4797,4798,4799,4804,4810,4816,4823,4825,4831,4836,4837,4841,4845,4851,4857,4863,4864,4867,4874,4876,4877,4880,4888,4890,4892,4899,4907,4908,4911,4917,4919,4923,4929,4937,4941,4945,4952,4959,4966,4968,4971,4973,4981,4986,4994,5002,5005,5008,5009,5011,5015,5021,5029,5037,5045,5046,5048,5053,5054,5055,5061,5065,5069,5071,5074,5077,5078,5083,5086,5093,5094,5095,5100,5101,5109,5110,5116,5120,5123,5126,5127,5130,5137,5139,5146,5149,5152,5160,5162,5168,5175,5178,5184,5191,5193,5194,5196,5198,5202,5207,5208,5214,5221,5229,5231,5234,5241,5244,5248,5253,5258,5263,5270,5275,5281,5283,5285,5289,5296,5303,5304,5307,5310,5311,5312,5315,5317,5318,5325,5333,5338,5343,5345,5347,5350,5351,5357,5362,5367,5375,5383,5386,5389,5390,5395,5398,5404,5408,5415,5416,5417,5421,5422,5429,5430,5431,5436,5443,5449,5457,5460,5463,5466,5473,5475,5477,5482,5488,5490,5497,5498,5503,5505,5506,5508,5511,5519,5523,5530,5532,5537,5539,5544,5549,5555,5556,5560,5561,5563,5565,5566,5571,5577,5582,5584,5591,5597,5598,5603,5607,5614,5615,5617,5620,5625,5631,5637,5640,5646,5654,5657,5658,5665,5668,5673,5676,5680,5688,5692,5693,5700,5704,5710,5716,5722,5724,5730,5731,5736,5743,5748,5753,5761,5764,5770,5773,5775,5783,5791,5797,5803,5807,5809,5811,5819,5826,5828,5832,5836,5838,5844,5851,5854,5859,5866,5869,5871,5879,5883,5888,5895,5898,5901,5909,5914,5915,5919,5925,5927,5931,5933,5937,5943,5951,5954,5957,5958,5965,5970,5977,5981,5983,5991,5999,6007,6008,6011,6016,6024,6025,6030,6033,6034,6039,6044,6047,6052,6056,6061,6062,6066,6067,6072,6079,6085,6093,6100,6103,6110,6118,6119,6121,6126,6133,6137,6142,6148,6152,6155,6157,6162,6164,6168,6174,6182,6183,6188,6192,6199,6205,6211,6217,6219,6226,6228,6229,6230,6231,6239,6247,6253,6254,6262,6265,6270,6278,6283,6287,6293,6298,6301,6302,6308,6314,6315,6323,6327,6332,6335,6342,6343,6344,6349,6356,6364,6370,6373,6379,6386,6391,6397,6399,6402,6407,6409,6417,6423,6428,6429,6430,6431,6437,6440,6443,6447,6450,6458,6462,6470,6474,6481,6487,6494,6496,6500,6506,6510,6511,6516,6523,6528,6536,6543,6548,6555,6562,6564,6565,6567,6572,6575,6583,6585,6592,6598,6605,6613,6616,6622,6629,6634,6641,6649,6652,6655,6661,6666,6667,6670,6673,6680,6685,6692,6700,6704,6709,6713,6716,6719,6724,6730,6738,6744,6750,6758,6759,6760,6766,6772,6780,6783,6791,6798,6799,6803,6811,6819,6820,6824,6826,6829,6834,6842,6850,6852,6858,6860,6867,6873,6880,6888,6893,6898,6905,6911,6915,6923,6930,6936,6937,6945,6949,6951,6959,6966,6968,6972,6974,6982,6984,6989,6993,6996,7004,7007,7014,7019,7024,7028,7030,7031,7033,7040,7046,7051,7058,7063,7065,7066,7069,7075,7076,7078,7082,7087,7089,7093,7095,7102,7107,7114,7121,7124,7131,7134,7141,7144,7149,7150,7151,7154,7160,7168,7176,7182,7188,7193,7200,7205,7211,7214,7218,7221,7229,7231,7237,7245,7250,7251,7254,7259,7267,7268,7275,7281,7289,7295,7301,7302,7303,7310,7311,7319,7321,7323,7331,7339,7341,7346,7352,7353,7356,7360,7362,7363,7370,7375,7378,7385,7391,7396,7402,7407,7412,7418,7421,7428,7431,7439,7442,7443,7450,7451,7452,7456,7463,7465,7468,7469,7474,7482,7485,7491,7493,7496,7504,7505,7509,7516,7518,7519,7525,7532,7536,7542,7545,7552,7559,7562,7568,7572,7578,7579,7586,7591,7595,7596,7600,7603,7607,7615,7621,7625,7628,7630,7632,7637,7642,7644,7651,7656,7660,7665,7671,7678,7679,7686,7688,7690,7691,7693,7695,7703,7706,7707,7714,7720,7724,7729,7736,7741,7744,7750,7751,7752,7758,7762,7763,7767,7774,7779,7781,7783,7791,7793,7800,7807,7814,7820,7822,7830,7837,7840,7843,7846,7853,7855,7862,7870,7878,7879,7882,7883,7887,7892,7894,7898,7904,7910,7915,7916,7918,7926,7930,7936,7941,7948,7954,7957,7958,7961,7962,7969,7970,7976,7981,7982,7990,7994,8002,8010,8017,8018,8026,8034,8036,8040,8046,8054,8062,8067,8073,8078,8083,8084,8085,8086,8088,8090,8096,8100,8101,8108,8115,8122,8124,8125,8130,8134,8135,8140,8147,8151,8158,8162,8167,8173,8176,8182,8187,8194,8202,8203,8204,8211,8219,8223,8228,8231,8233,8239,8244,8252,8254,8258,8261,8265,8273,8280,8287,8290,8296,8299,8304,8310,8318,8322,8329,8334,8337,8338,8342,8348,8355,8362,8364,8366,8371,8375,8379,8382,8385,8389,8394,8399,8406,8409,8415,8422,8423,8429,8434,8438,8439,8440,8447,8450,8455,8463,8465,8467,8472,8477,8480,8483,8488,8493,8497,8500,8501,8505,8510,8516,8521,8529,8531,8532,8536,8544,8550,8556,8557,8563,8565,8570,8571,8573,8579,8587,8594,8596,8604,8605,8612,8614,8621,8629,8634,8641,8645,8648,8654,8660,8663,8666,8674,8680,8682,8689,8692,8697,8699,8702,8705,8711,8715,8723,8726,8729,8730,8731,8732,8739,8746,8754,8755,8757,8761,8766,8768,8771,8776,8779,8780,8785,8792,8800,8801,8806,8810,8811,8813,8818,8826,8833,8836,8838,8845,8851,8853,8858,8861,8866,8873,8881,8882,8883,8891,8893,8895,8899,8903,8904,8908,8910,8911,8918,8923,8929,8934,8942,8950,8957]
-- main = print $ getMetricWeight 1 [0..500]
-- main = do ons <- randomOnsets 2000 
          -- print (map time ons)
          -- print (getMetricWeight 1 ons)
               
--------------------------------------------------------------------------------
-- property testing
--------------------------------------------------------------------------------
pSpectralWeight :: [Time] -> Bool
pSpectralWeight ons = getSpectralWeightOld 1 ons == getSpectralWeight 1 ons

pMetricWeight :: [Time] -> Bool
pMetricWeight ons = getMetricWeightOld 1 ons == getMetricWeight 1 ons
        
pLocalMeter :: Period -> [Time] -> Bool
pLocalMeter p o = toNewMeterMap (getLocalMetersOld p o) == getLocalMeters p o
               
toNewMeterMap :: IntMap [(Time, Len)] -> MeterMap
toNewMeterMap = M.map convert where
  
  convert :: [(Time, Len)] -> OnsetMap
  convert = M.fromList . map (first time)

jmrEx :: [Time]
jmrEx = [0,1,2,6,8,9,10,14,16,17,18,22,24,25,26,30]
-- metric weight should be: [17,13,65,57,25,21,65,57,33,21,65,57,25,13,65,57]
